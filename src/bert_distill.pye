from pytorch_pretrained_bert.modeling import BertModel, BertPreTrainedModel
from torch import nn
from torch.nn import CrossEntropyLoss, ModuleList
import torch.nn.functional as F
import torch
import logging

from clf_distill_loss_functions import ClfDistillLossFunction


class BertDistill(BertPreTrainedModel):
    """Pre-trained BERT model that uses our loss functions"""

    def __init__(self, config, num_labels, loss_fn: ClfDistillLossFunction, lower_loss_fn_type=None):
        super(BertDistill, self).__init__(config)
        self.num_labels = num_labels
        self.loss_fn = loss_fn
        # if lower_loss_fn_type and lower_loss_fn_type=='plain':
        #     self.lower_loss_fn = ClfDistillLossFunctions.Plain()
        # elif lower_loss_fn_type and lower_loss_fn_type!='plain':
        #     print("lower_loss_fn_type not supported")
        #     exit()
        self.lower_loss_fn = None
        self.bert = BertModel(config)
        self.dropout = nn.Dropout(config.hidden_dropout_prob)
        self.softmax = nn.Softmax()
        self.num_layers = 12
        self.debias_layer = 2
        self.classifier_list = ModuleList([nn.Linear(config.hidden_size, num_labels) for i in range(self.num_layers)])
        # self.classifier = nn.Linear(config.hidden_size, num_labels)
        # self.projection = nn.Linear(2 * config.hidden_size, config.hidden_size)
        self.apply(self.init_bert_weights)

    def forward(self, input_ids, token_type_ids=None, attention_mask=None,
                labels=None, bias=None, teacher_probs=None, global_step=None, total_step=None, anti_bias_label=None):
        output_list, pooled_output = self.bert(
            input_ids, token_type_ids, attention_mask, output_all_encoded_layers=True)
        pooled_output_list = [self.bert.pooler(x) for x in output_list]
        logits_list = []
        for i in range(len(pooled_output_list)):
            if i == len(pooled_output_list)-1:
                if labels is not None:
                    logits_list.append(self.classifier_list[i](self.dropout(pooled_output_list[i]) + self.dropout(pooled_output_list[self.debias_layer]).detach()))
                else:
                    logits_list.append(self.classifier_list[i](self.dropout(pooled_output_list[i])))
            else:
                logits_list.append(self.classifier_list[i](self.dropout(pooled_output_list[i])))

        # for i in range(len(pooled_output_list)):
        #     if i == len(pooled_output_list)-1:
        #         if labels is not None:
        #             combined_hidden_states = self.projection(torch.cat([self.dropout(pooled_output_list[i]), self.dropout(pooled_output_list[3])], dim=-1))
        #             logits_list.append(self.classifier_list[i](combined_hidden_states))
        #         else:
        #             logits_list.append(self.classifier_list[i](self.dropout(pooled_output_list[i])))
        #     else:
        #         logits_list.append(self.classifier_list[i](self.dropout(pooled_output_list[i])))
        
        # for i in range(len(pooled_output_list)):
        #     if i == len(pooled_output_list)-1:
        #         if labels is not None:
        #             logits_list.append(self.classifier(self.dropout(pooled_output_list[i]) + self.dropout(pooled_output_list[3]).detach()))
        #         else:
        #             logits_list.append(self.classifier(self.dropout(pooled_output_list[i])))
        #     else:
        #         linear_weight = self.classifier.weight.detach()
        #         linear_bias = self.classifier.bias.detach()
        #         # logits_list.append(self.classifier(self.dropout(pooled_output_list[i])))
        #         logits_list.append(F.linear(self.dropout(pooled_output_list[i]), linear_weight, linear_bias))

        # # baseline
        # for i in range(len(pooled_output_list)):
        #     logits_list.append(self.classifier_list[i](self.dropout(pooled_output_list[i])))
        
        # threshold = 0.85
        # filter_mask_1 = self.softmax(logits_list[3]) > threshold
        # filter_mask_1 = filter_mask_1.int()
        # filter_mask_2 = self.softmax(logits_list[3]) < (1 - threshold)
        # filter_mask_2 = filter_mask_2.int()
        # filter_mask = filter_mask_1 + filter_mask_2

        # max_scores = self.softmax(logits_list[3]).max(dim=-1, keepdim=True)[0]
        # # print(max_scores)
        # filter_mask = (max_scores > threshold).int()
        # filter_mask = filter_mask.detach()
        # filter_mask = filter_mask.repeat(1, self.num_labels)
        # used_scores = self.softmax(logits_list[3].detach()) * filter_mask + (1 - filter_mask) * 1/self.num_labels

        # print(used_scores)
        # exit()
        

        # logits_list[11] = torch.log(used_scores) + F.log_softmax(logits_list[11])
        # logits_list[3] = F.log_softmax(logits_list[3])

        # 检测前6层是否有4层预测一致
        # num_threshold = len(logits_list)//3
        # # for i in range(1:len(pooled_output_list)//2):
        # lower_layer_logits_list = [x.unsqueeze(0) for x in logits_list[:len(logits_list)//2]]
        # lower_layer_logits = torch.cat(lower_layer_logits_list, 0)
        # # logging.info(lower_layer_logits.size())
        # # exit()
        # lower_layer_prediction = lower_layer_logits.max(-1)[1]
        # lower_layer_prediction = F.one_hot(lower_layer_prediction, num_classes=self.num_labels)
        # # logging.info(lower_layer_prediction)
        # # logging.info(lower_layer_prediction.size())
        # sum_prediction = lower_layer_prediction.sum(dim=0).max(dim=-1, keepdim=True)[0]
        # filter_mask = (sum_prediction >= num_threshold).int()
        # filter_mask = filter_mask.detach()
        # filter_mask = filter_mask.repeat(1, self.num_labels)
        # # used_scores = self.softmax(lower_layer_logits.mean(dim=0).detach()) * filter_mask + (1 - filter_mask) * 1/self.num_labels
        # used_scores = F.softmax(logits_list[3].detach(), dim=-1) * filter_mask + (1 - filter_mask) * 1/self.num_labels

        # logits = logits_list[11]
        # if labels is None:
        #     # top_layer_logits_list = [x.unsqueeze(0) for x in logits_list[len(logits_list)//2:]]
        #     # top_layer_logits = torch.cat(top_layer_logits_list, dim=0)
        #     # top_layer_prediction = top_layer_logits.max(-1)[1]
        #     # top_layer_prediction = F.one_hot(top_layer_prediction, num_classes=self.num_labels)
        #     # sum_prediction = top_layer_prediction.sum(dim=0).float()
        #     # return (1/5 * torch.log(used_scores) + 4/5 * F.log_softmax(top_layer_logits, dim=-1)).mean(dim=0)
        #     # return sum_prediction
        #     # return torch.log(used_scores) + F.log_softmax(logits_list[11])
        #     # return logits_list[-1]
        #     return 1/3 * torch.log(used_scores) + 2/3 * F.log_softmax(logits_list[11])

        # for i in range(len(pooled_output_list)):
        #     if i < len(pooled_output_list)//2:
        #         logits_list[i] = F.log_softmax(logits_list[i])
        #     else:
        #         logits_list[i] = torch.log(used_scores) + F.log_softmax(logits_list[i])
        # for i in range(len(pooled_output_list)):
        #     if i < len(pooled_output_list)//2:
        #         logits_list[i] = F.log_softmax(logits_list[i])
        #     elif i == len(pooled_output_list) - 1:
        #         logits_list[i] = torch.log(used_scores) + F.log_softmax(logits_list[i])

        # for i in range(len(pooled_output_list)):
        #     if i != 0:
        #         max_scores = self.softmax(logits_list[i-1]).max(dim=-1, keepdim=True)[0]
        #         # print(max_scores)
        #         filter_mask = (max_scores > threshold).int()
        #         filter_mask = filter_mask.detach()
        #         filter_mask = filter_mask.repeat(1, self.num_labels)
        #         used_scores = self.softmax(logits_list[i-1].detach()) * filter_mask + (1 - filter_mask) * 1/self.num_labels
        #         logits_list[i] = torch.log(used_scores) + F.log_softmax(logits_list[i])
        # logits_list[0] = F.log_softmax(logits_list[0])

        # for i in range(len(pooled_output_list)):
        #     if i!=0:
        #         logits_list[i] = 2 * self.softmax(logits_list[i-1].detach()) * logits_list[i]
        

        # print(t.size())
        # print(pooled_output.size())
        # exit()
        # logits = self.classifier(self.dropout(pooled_output))

        logits = logits_list[11]
        # # logits = logits_list[11]
        if labels is None:
            return logits
        # loss_sum = 0.0
        # div = 0
        # for i in range(len(pooled_output_list)):
        #     # if not (i == 3 or i == len(pooled_output_list)-1):
        #     #     continue
        #     # if not (i == len(pooled_output_list)-1):
        #     #     continue
        #     if i < len(pooled_output_list)//2 or i == len(pooled_output_list)-1:
        #         loss_sum += i * self.loss_fn.forward(pooled_output_list[i], logits_list[i], bias, teacher_probs, labels)
        #         div += i

        # loss = loss_sum/div

        if anti_bias_label is None: 
            if self.lower_loss_fn:
                loss_lower = self.lower_loss_fn.forward(pooled_output_list[self.debias_layer], logits_list[self.debias_layer], bias, teacher_probs, labels)
            else:
                loss_lower = self.loss_fn.forward(pooled_output_list[self.debias_layer], logits_list[self.debias_layer], bias, teacher_probs, labels)
            loss_upper = self.loss_fn.forward(pooled_output_list[11], logits_list[11], bias, teacher_probs, labels)

        
            # if not total_step:
            #     if global_step is not None and global_step <= 3000:
            #         loss = 0.8 * loss_lower + 0.2 * loss_upper
            #     else:
            #         loss = 0.5 * loss_lower + 0.5 * loss_upper
            # else:
            #     alpha = global_step / total_step
            #     loss = (1-alpha) * loss_lower + alpha * loss_upper
            loss = 0.5 * loss_lower + 0.5 * loss_upper
            return logits, loss
        else:
            loss_lower = self.loss_fn.forward(pooled_output_list[self.debias_layer], logits_list[self.debias_layer], bias, teacher_probs, labels, False)
            loss_upper = self.loss_fn.forward(pooled_output_list[11], logits_list[11], bias, teacher_probs, labels, False)

            loss = 0.5 * loss_lower.mean() + 0.5 * loss_upper.mean()

            anti_bias_mask = (anti_bias_label == 1).int()
            bias_mask = (anti_bias_label == 0).int()
            loss_lower_anti_bias_loss = (loss_lower * anti_bias_mask).sum() / anti_bias_mask.sum()
            loss_lower_bias_loss = (loss_lower * bias_mask).sum() / bias_mask.sum()
            loss_upper_anti_bias_loss = (loss_upper * anti_bias_mask).sum() / anti_bias_mask.sum()
            loss_upper_bias_loss = (loss_upper * bias_mask).sum() / bias_mask.sum()

            return logits, loss, loss_lower_anti_bias_loss, loss_lower_bias_loss, loss_upper_anti_bias_loss, loss_upper_bias_loss

    def forward_and_log(self, input_ids, token_type_ids=None, attention_mask=None,
                labels=None, bias=None, teacher_probs=None):
        _, pooled_output = self.bert(
            input_ids, token_type_ids, attention_mask, output_all_encoded_layers=False)
        logits = self.classifier(self.dropout(pooled_output))
        if labels is None:
            return logits
        loss = self.loss_fn.forward(pooled_output, logits, bias, teacher_probs, labels)

        cel_fct = CrossEntropyLoss(reduction="none")
        indv_losses = cel_fct(logits, labels).detach()
        return logits, loss, indv_losses
    
    def forward_analyze(self, input_ids, token_type_ids=None, attention_mask=None,
                labels=None, bias=None, teacher_probs=None):
        _, pooled_output = self.bert(
            input_ids, token_type_ids, attention_mask, output_all_encoded_layers=False)
        logits = self.classifier(self.dropout(pooled_output))

        if labels is None and not self.training:
            return logits, pooled_output
        else:
            raise Exception("should be called during eval and "
                            "labels should be none")

